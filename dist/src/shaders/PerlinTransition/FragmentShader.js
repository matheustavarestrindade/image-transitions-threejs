import { createDebugGLSLCode } from "../debug/DigitsToConsoleDebug";
import { FromShaderToy } from "../FromShaderToy";
export var loadFragmentShader = function (debugMode) {
    return FromShaderToy("\n    #ifdef GL_ES\n        precision mediump float;\n    #endif\n\n    uniform float scale; // = 4.0\n    uniform float smoothness; // = 0.01\n\n    uniform float seed; // = 12.9898\n\n    float random(vec2 co) {\n        highp float a = seed;\n        highp float b = 78.233;\n        highp float c = 43758.5453;\n        highp float dt= dot(co.xy ,vec2(a,b));\n        highp float sn= mod(dt,3.14);\n        return fract(sin(sn) * c);\n    }\n\n    float noise (in vec2 st) {\n        vec2 i = floor(st);\n        vec2 f = fract(st);\n\n        // Four corners in 2D of a tile\n        float a = random(i);\n        float b = random(i + vec2(1.0, 0.0));\n        float c = random(i + vec2(0.0, 1.0));\n        float d = random(i + vec2(1.0, 1.0));\n\n        // Smooth Interpolation\n\n        // Cubic Hermine Curve.  Same as SmoothStep()\n        vec2 u = f*f*(3.0-2.0*f);\n        // u = smoothstep(0.,1.,f);\n\n        // Mix 4 coorners porcentages\n        return mix(a, b, u.x) +\n                (c - a)* u.y * (1.0 - u.x) +\n                (d - b) * u.x * u.y;\n    }\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n        vec2 uv = fragCoord/iResolution.xy;\n        vec4 from = texture(firstTexture, uv);\n        vec4 to = texture(secondTexture, uv);\n        float n = noise(uv * scale);\n        \n        float progress = smoothstep(0.1, 0.9, sin(iTime * 0.5) * 0.5 + 0.5);\n\n        float p = mix(-smoothness, 1.0 + smoothness, progress);\n        float lower = p - smoothness;\n        float higher = p + smoothness;\n        \n        float q = smoothstep(lower, higher, n);\n        vec3 color = mix(to, from, q).rgb;\n        ".concat(createDebugGLSLCode(0, 0, "progress"), "\n        fragColor.rgb = color.rgb;\n    }\n\n    "), debugMode);
};
//# sourceMappingURL=FragmentShader.js.map