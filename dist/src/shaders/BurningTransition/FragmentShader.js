import { createDebugGLSLCode } from "../debug/DigitsToConsoleDebug";
import { FromShaderToy } from "../FromShaderToy";
export var loadFragmentShader = function (debugMode) {
    return FromShaderToy("\n\n    float Hash( vec2 p)\n    {\n        vec3 p2 = vec3(p.xy,1.0);\n        return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*3758.5453123);\n    }\n\n    float noise(in vec2 p)\n    {\n        vec2 i = floor(p);\n        vec2 f = fract(p);\n        f *= f * (3.0-2.0*f);\n\n        return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n            mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n            f.y);\n    }\n\n    float fbm(vec2 p) {\n        float v = 0.0;\n        v += noise(p*1.)*.5;\n        v += noise(p*2.)*.25;\n        v += noise(p*4.)*.125;\n        return v;\n    }\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {   \n\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        \n        vec3 src = texture(firstTexture, uv).rgb;\n        vec3 tgt = texture(secondTexture, uv).rgb;\n        \n        vec3 color = src;\n\n        uv.x -= 1.5;\n        \n        float ctime = smoothstep(0.1, 0.9, sin(iTime * 0.5) * 0.5 + 0.5) * 2.75;\n        \n        // burn\n        float d = uv.x + uv.y * 0.5 + 0.5 * fbm(uv * 15.1) + ctime * 1.3;\n        if (d >0.35) color = clamp(color-(d-0.35)*10.,0.0,1.0);\n        if (d >0.47) {\n            if (d < 0.5 ) \n                color += (d-0.4) * 33.0 * 0.5 * (0.0 + noise(100. * uv + vec2(-ctime * 2.,0.))) *vec3(1.5,0.5,0.0);\n            else \n                color += tgt; \n        }\n\n        ".concat(createDebugGLSLCode(0, 0, "ctime"), "\n        \n        fragColor = vec4(color, 1.0);\n    }\n    "), debugMode);
};
//# sourceMappingURL=FragmentShader.js.map