import { FromShaderToy } from "../FromShaderToy";
export var loadFragmentShader = function (debugMode) {
    return FromShaderToy("\n\n    const float strength = 0.3;\n    const float PI = 3.141592653589793;\n    \n    float Linear_ease(in float begin, in float change, in float duration, in float time) {\n        return change * time / duration + begin;\n    }\n    \n    float Exponential_easeInOut(in float begin, in float change, in float duration, in float time) {\n        if (time == 0.0)\n            return begin;\n        else if (time == duration)\n            return begin + change;\n        time = time / (duration / 2.0);\n        if (time < 1.0)\n            return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;\n        return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;\n    }\n    \n    float Sinusoidal_easeInOut(in float begin, in float change, in float duration, in float time) {\n        return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;\n    }\n    \n    float random(in vec3 scale, in float seed) {\n        return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n    }\n    \n    vec3 crossFade(in vec2 uv, in float dissolve) {\n        return mix(texture(firstTexture, uv).rgb, texture(secondTexture, uv).rgb, dissolve);\n    }\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n        vec2 texCoord = fragCoord.xy / iResolution.xy;\n        float progress = sin(iTime*0.5) * 0.5 + 0.5;\n        // Linear interpolate center across center half of the image\n        vec2 center = vec2(Linear_ease(0.5, 0.0, 1.0, progress),0.5);\n        float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, progress);\n    \n        // Mirrored sinusoidal loop. 0->strength then strength->0\n        float strength = Sinusoidal_easeInOut(0.0, strength, 0.5, progress);\n    \n        vec3 color = vec3(0.0);\n        float total = 0.0;\n        vec2 toCenter = center - texCoord;\n    \n        /* randomize the lookup values to hide the fixed number of samples */\n        float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0)*0.5;\n    \n        for (float t = 0.0; t <= 20.0; t++) {\n            float percent = (t + offset) / 20.0;\n            float weight = 1.0 * (percent - percent * percent);\n            color += crossFade(texCoord + toCenter * percent * strength, dissolve) * weight;\n            total += weight;\n        }\n    \n        fragColor = vec4(color / total, 1.0);\n    }\n", debugMode);
};
//# sourceMappingURL=FragmentShader.js.map